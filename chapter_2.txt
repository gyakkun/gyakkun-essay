第二章 架设PT网站所需要的技术综述


2.1 Bittorrent协议, Bencode编码与Torrent文件 [注: BEP003 http://www.bittorrent.org/beps/bep_0003.html]

Bittorrent(简称BT)协议是用在对等网络中目标为用户群对用户群(Peer-to-peer)的文件分享网络协议, 最大的特点为下载同一文件的用户越多, 下载该文件就越迅速。下载如果不关闭相应的BT客户端软件的话, 继续维持上传状态, 就可以该形式"分享"所下载的文件, 在这种场景下, 每一个BT客户端都起到类似CDN的作用。

BT协议将所需要分享的单个文件或者一组文件按照用户指定的顺序平铺成连续的总和二进制数据段, 然后按照用户指定的分块大小(Trunk size)进行补齐与分块, 使用SHA-1算法逐分块地对二进制数据段进行哈希, 生成相应分块的哈希值, 各分块的哈希值简单按先后顺序前后拼接在一起, 成为总和二进制数据段的哈希值, 这个总和哈希值在之后的使用中起到校验所下载的文件的作用。

由于上述平铺总和式的校验方式, 必须要对之后所下载的数据按照原始文件长度进行切割方可得到原始语义上的文件。同时, 为了方便地将这些分块校验码信息、文件长度信息在互联网上传播, 需要一种文件格式将上述信息进行编码。BT协议的提出者Bram Cohen创造性地提出了Bencode编码规则, 并在之后的Torrent文件(以下称作种子文件)生成步骤中进行了相应的实现。

Bencode编码的种子文件使用ASCII字符进行编码, 使得即使在普通文本编辑器中打开也能读懂其中的语义。Bencode中定义了字符串(Byte strings)、整数(Integers)、线性表(Lists)以及字典(Dictionary, 即关联数组(associative arrays))四种基本数据类型, 其中的串列类似于数组, 字典类似于键值对, 通过他们的组合就可以得到足够复杂的层级结构。

Bencode编码将要编码的内容通过简单的字母对括起来, 或者是指定长度后用冒号表示出来。如整数用i和e括起来, `i233e`表示正整数233, `i-233e`表示负整数-233。字符串则是"长度:内容", 如`12:xiaowufeixia`表示"xiaowufeixia"这个字符串。线性表允许不同的数据类型混杂, 使用l和e括起来, 比如对前述的两种数据结构, `l12:xiaowufeixiai233ee`表示依次的字符串"xiaowufeixia"以及正整数233。字典表用d和e括住所要编码的内容, 字典元素中键和值必须紧跟在一起, 所有键只能为字符串类型, 且键的字符串按照字典序排列。如键为"xiaowufeixia"值为正整数233, 紧接键为"gyakkun"值为负整数-233的字典表将被编码为`d7:gyakkuni-233e12:xiaowufeixiai233ee`。

那么Torrent种子文件的结构也就呼之欲出了。根是一个字典, 下有一个键为"info"的字典节点, info字典的第一个键值对键为"files", 值为线性表, 线性表中的各个节点又以字典和线性表的形式存放着所分享的不同文件的具体长度。info字典的第二个键值对键为"name"值为所分享的文件文件名, 或是文件夹名。info字典的第三个键值对键为"piece length", 表示用户指定的分块大小长度, 值是正整数, 通常是2的幂次。紧跟着的info字典的第四个键值对键是"pieces", 值就是前述的总和哈希值, 以字符串的形式存储。

[图 配上Bencode Editor的图, 以及文本编辑器中打开得到的图]

将这样构成的一个种子文件通过互联网分享出去, 得到该文件的人相当于得到了一份完整的文件校验信息。将这个文件交给BT客户端软件进行解析。通常在前述的"info"节点之前还会有一个"announce-list"节点, 记录后文中将要提到的Tracker服务器的地址信息。BT客户端得到Tracker列表后, 和Tracker服务器进行通信, 取得对等方列表(Peer list), 也就是网络上正在上传/下载这份种子文件所描述的资源的BT客户端的IP地址及端口号信息。通信内容也是用Bencode方式进行编码的, 下层协议一般是http或https。得到对等方BT客户端的IP地址及端口号后, BT客户端之间就可以发起进一步的通信, 进行实际的文件内容传输。其中囊括拥塞控制等算法在内的具体传输协议既可以使用原始BT协议中定义的一套基于TCP的协议, 也可以替换成BEP(Bittorrent Enhancement Proposal)中提出的基于UDP的**utp** [u记得替换成mui]协议, 详细算法过程可以参考BEP网站[注], 在此不再赘述。


2.2 适用于BT协议的Tracker服务器及Private Tracker

事实上, 一个PT平台本身也必须实现一个Tracker。Tracker负责记录每一个正在上传/下载相应种子文件所代表的资源的对等方(以下记作Peer)的BT客户端的IP地址和端口。也就是说, 一个Tracker必须维护这样一个表, 主键是种子文件的特征值, 字段包括该正在上传/下载该主键所代表的种子文件的Peer信息, 也即前述的地址和端口。在具体的实现中, 上面提到的这个特征值实际上会用前述info字典整体的[多少位?]XX位SHA-1哈希值来表示, 这也是著名的衍生于BT协议的magnet磁力链地址的核心所在, 因与本文不直接相关, 此处按下不表。

BT客户端和Tracker发起通信(以下记作announce), BT客户端将自己正在上传/下载的种子的特征值(peer_id)、BT客户端在两次announce之间对该种子的上传/下载量(uploaded/downloaded)等信息通过HTTP GET请求参数的方式向Tracker传送。Tracker则通过Bencode编码的方式, 将BT客户端所需要的peer_id对应的对等方列表(peers), 对peers是一个List, 每个项里面又用Dictionary的形式记录着peer_id(种子特征值), ip(对等方的IP 地址)以及port(对等方BT客户端监听的端口号)。有了这些信息, 一方BT客户端就可以向对等方BT客户端发起通信。


2.3 BT客户端软件

BT协议提出之初, 作者Bram Cohen就实现了一版BT客户端软件`Bittorrent`, 随后他加入了商业公司`Bittorrent, Inc.`。所以Bittorrent既是协议的名称, 也是BT协议客户端软件的名称, 同时还是目前负责开发维护BT协议的商业公司的名称。

BT客户端就是直接面对用户的BT协议UI。BT客户端软件的工作主要分为以下部分:

1) 监听指定端口, 以接受 4) 中将要描述的来自对等方BT客户端的传入连接。

2) 解析用户输入的Torrent文件, 取得种子特征值、Tracker服务器列表等关键信息。

3) 根据特征值和Tracker服务器的域名/IP地址, 向Tracker发起HTTP GET请求, GET的请求参数以及返回的结果如2.2中所述。

4) 根据返回的peers(对等方列表)中的IP地址和端口号, 向对等方的BT客户端发起连接。

5) 4)中的连接建立后, 开始逐分块的二进制数据传送。其中的具体传输协议可参考BEP-003, 可以是普通的TCP, 也可以是uTP。

6) 得到完整的一段分块的数据后, 根据2.1中所述的各分块SHA-1校验码进行校验。如果校验通过, 则放入缓存, 等待写入磁盘。如果校验出错, 则丢弃该分块。**通过这样分块验证/传送的机制, 可以最大限度保证数据损坏局限在小范围内, 体现了传输协议的高可用性**
。

7) 将一定数量的已完成分块写入磁盘。

8) 重复 5) ~ 7) 中的步骤, 直至种子文件里描述的所有分块都写入磁盘。

2.4 Laravel MVC框架


2.5 UNIT3D-Community-Edition







