第三章 总体设计

3.1 系统结构

如2.4中所述, UNIT3D按照标准的Laravel项目组织文件。根据开发需要, 笔者需要增删修改的主要有`/app/Http/Controllers/, /app/Http/Controllers/API/, /app/Models/, /database/migrations/, /resources/views/, /resources/lang/`, 分别对应投票、增添新字段所应修改的控制器部分, 数据结构模型部分, 数据库表迁移部分, 资源的视图部分, 以及本地化的语言词汇对照部分。

[图 PhpStorm中的目录结构, 突出显示上面提到的部分]


3.2 功能增删与调整

3.2.1 中文本地化

未经修改的原始开源版本有开发者负责将英语的词汇进行机器翻译, 使之能够勉强本地化使用。然而作为母语是中文的用户, 机器翻译并不能满足笔者的要求。为此, 笔者修改了`/resources/views/, /resources/lang/`中的内容。

原版中已经有大量硬编码进视图的英语词汇。笔者的工作是将其一一剔除替换成可被取引用的`@lang('lang.var')`的形式。然后针对`/resources/lang/`中已有机器翻译的词汇, 进行一一校对、润色。

{ //感觉应该放到第四章???

[图 一份git diff式的源码前后对比, 突出从原始英语单词到`@lang('lang.var')`的部分]

然后针对英语转中文的翻译部分, 笔者曾经修过实用口译这门课程, 对快速高效的翻译颇有心得。经过一番重新翻译、修改、润色, 最终得到了令人满意的中文用户界面。

[图 对比前后用户界面的语言部分]

}


3.2.2 数据表字段调整

因为NexusPHP中有比较关键的字段, 如种子描述的副标题, 再UNIT3D中并没有对应的字段, 所以为了接下来的迁移工作, 必须要对UNIT3D的数据表进行字段的调整。

笔者主要的工作是在`/database/migrations/`目录中增加数据库改动迁移脚本, 同时要编写回溯的脚本, 以便于数据库的回滚操作。

3.2.3 迁移NexusPHP数据表

前期试运营的过程中使用了基于NexusPHP的天津大学北洋园TJUPT[注]的开源版本并投入实际运营, 积累了大量有效的用户数据。然而NexusPHP和UNIT3D的原始数据表完全不兼容, 因此需要编写表级别的迁移脚本进行迁移工作。

UNIT3D的代码贡献者中有编写好的迁移脚本模板, 与笔者一同参与开发的同好之一的工作是将该脚本进行一定的修改, 以适配TJUPT的一些特定字段。笔者则审核该脚本, 进行必要的修改, 增加前述的副标题字段, 然后交付上线试运行。

3.2.4 标签调整

因为原始的标签系统有很多元信息被设为必要字段, 而NexusPHP中的标签系统相对不那么严谨, 只在发布种子的时要求发布者填写必要的信息的时候根据输入的内容在种子标题字段中按照"[XX]"的形式用方括号括起相应的标签。 

然而UNIT3D独立实现了一个基于元信息联网查询的标签功能, 通过解析种子文件以及发布者输入的种子文件内容元信息, 解析出相应的字段, 如电影标题、电影对应的IMDB[注] ID等, 然后根据标题和ID向IMDB的API发起查询请求, 根据返回的结果里面的标签字段给发布到UNIT3D的种子打上标签, 继而录入数据库。

其中IMDB在国内的连接性并不理想, 导致在接下来刚开始开发测试的过程中, 不断出现500错误。为此, 笔者需要进行标签功能的剔除, 以避免这类因为网络连接性原因导致的极为影响用户体验的错误发生。

3.2.5 实现投票功能



3.2.6 实现IP地址记录功能















